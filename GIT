Git commands:

1) Git init (To initialize a Git repository here, type the following command). (git init)

2) Git status ( git status command to see what the current state of our project is). (git status)

3) To tell Git to start tracking changes made to octocat.txt, we first need to add it to the staging area by using git add. (git add octocat.txt)
  
4) Good job! Git is now tracking our octocat.txt file. Let's run git status again to see where we stand.(git status)

5) To store our staged changes we run the commit command with a message describing what we've changed. Let's do that now by typing: (it commit -m "Add cute octocat story")

6) I put some in a directory named "octofamily" and some others ended up in the root of our "octobox" directory. Luckily, we can add all the new files using a wildcard with git add. Don't forget the quotes!(git add '*.txt')

7) git commit -m 'Add all the octocat txt files'

8) Fortunately for us, there's git log. Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them.(git log)

9) This command takes a remote name and a repository URL, which in your case is  https://github.com/try-git/try_git.git.(git remote add origin https://github.com/try-git/try_git.git)

10) The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. Go ahead and push it!

   (git push -u origin master)

11) We can check for changes on our GitHub repository and pull down any new changes by running (it pull origin master)

12) In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer. (git diff HEAD)

13) Let's use git add to stage octofamily/octodog.txt, which I just added to the family for you.(git add octofamily/octodog.txt)

14) Good, now go ahead and run git diff with the --staged option to see the changes you just staged. You should see that  octodog.txt was created. (git diff --staged)

15) You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt (git reset octofamily/octodog.txt)

16) When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch.

17) We want to remove all these pesky octocats, so let's create a branch called clean_up, where we'll do all the work.(git branch clean_up)

18) Great! Now if you type git branch you'll see two local branches: a main branch named master and your new branch named clean_up.You can switch branches using the git checkout <branch> command. Try it now to switch to the clean_up branch
	(git checkout clean_up)

19) Now that you've removed all the cats you'll need to commit your changes.Feel free to run git status to check the changes you're about to commit.(git commit -m "Remove all the cats")

20) 
